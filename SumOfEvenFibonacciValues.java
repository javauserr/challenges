public class SumOfEvenFibonacciValues {
/**
 * https://projecteuler.net/problem=2
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
 * find the sum of the even-valued terms.
 * 
 * Answer:4613732
 */
    public static void main(String[] args) {
    	SumOfEvenFibonacciValues ef = new SumOfEvenFibonacciValues();
    	System.out.println("sum of even values recursiveFibonacci: " + ef.recursiveSolution());		
    	System.out.println("iterativeSolution sum = " + ef.iterativeSolution());
    	System.out.println("efficientIterativeSolution sum = " + ef.efficientIterativeSolution());
    }
    
    public int recursiveSolution() {
    	int memo[] = new int[101];
		int sum = 0;
		
		for (int i = 2; ; i += 3) {
			int val = recursiveFibonacciWithMemoization(i, memo);
			
			if (val > 4000000) {
				break;
			}
			
			sum += val; 
		}
		
		return sum;		    	
    }

    public int recursiveFibonacciWithMemoization(int n, int[] memo) {
    	if (n <= 2) {
    		return n;
    	} else if (memo[n] == 0){
    		memo[n] = recursiveFibonacciWithMemoization(n-1, memo) + recursiveFibonacciWithMemoization(n-2, memo);    		
    	}
    	
    	return memo[n];
    }

    // calculates next fibonacci value in loop although it is not even
    public int iterativeSolution() {
    	int limit = 4000000;
		int	sum = 0;
		int	a = 1;
		int	b = 1;

		while (b <= limit) {
			 if (b % 2 == 0) {
				 sum = sum + b;
			 }
			
			 int h = a + b;
			 a = b;
			 b = h;
		}    			
    			
		return sum;    	
    }

    // it jumps over from 2 odd fibonacci values in loop
    public int efficientIterativeSolution() {
    	int limit = 4000000;
		int	sum = 0;
		int	a = 1;
		int b = 1;
		int	c = a + b;
								
		while (c <= limit) {			 
			sum = sum + c;  
			a = b + c;		
			b = c + a;		
			c = a + b;		
		}    			
    			
		return sum;
    }
    
}
